ifelse(
str_detect(liste_finale$Espèce, " x ") == FALSE,
str_extract(
liste_finale$Espèce,
"[:alpha:]{1,}[:blank:]{1,}[:alpha:]{1,}"
),
liste_finale$Espèce
)
liste_finale$Genre <-   ifelse(
is.na(liste_finale$Espèce) == FALSE &
is.na(liste_finale$Genre) == TRUE,
str_extract(liste_finale$"Espèce", "[:alpha:]{1,}"),
liste_finale$Genre
)
###### travaux /!\ ######
liste_finale$Ordre <- ifelse(
liste_finale$Ordre %>%
str_detect("Groupe[:blank:]{1}[:alpha:]{1,}[:blank:]{1}indéterminées") != FALSE,
liste_finale$Ordre %>% str_extract("(?<=[:blank:])[:alpha:]{1,}(?=[:blank:])"),
liste_finale$Ordre)
#####fin travaux /!\ ######
if (lien %>% is.na() == FALSE) {
write.csv(liste_finale%>%
dplyr::select(
code_base,
code_retenu,
Forme,
Variété,
Sous.Espèce,
Espèce,
Genre,
Tribu,
Tribu1,
Sous.Famille,
Sous.Famille1,
Famille,
Super.Famille,
Micro.Ordre,
Infra.Ordre,
Sous.Ordre,
Ordre,
Ordre1,
Super.Ordre,
Infra.Classe,
Sous.Classe,
Sous.Classe1,
Classe,
Classe1,
Super.Classe,
Infra.Embranchement,
Sous.Embranchement,
Sous.Embranchement1,
Embranchement,
Embranchement1,
Infra.Règne,
Infra.Règne1,
Sous.Règne,
Règne
), file = lien,row.names = FALSE)
}
return(liste_finale%>%
dplyr::select(
code_base,
code_retenu,
Forme,
Variété,
Sous.Espèce,
Espèce,
Genre,
Tribu,
Tribu1,
Sous.Famille,
Sous.Famille1,
Famille,
Super.Famille,
Micro.Ordre,
Infra.Ordre,
Sous.Ordre,
Ordre,
Ordre1,
Super.Ordre,
Infra.Classe,
Sous.Classe,
Sous.Classe1,
Classe,
Classe1,
Super.Classe,
Infra.Embranchement,
Sous.Embranchement,
Sous.Embranchement1,
Embranchement,
Embranchement1,
Infra.Règne,
Infra.Règne1,
Sous.Règne,
Règne
))
}
############# fonction pour faire travauller sur des tableau espèces qui renvoie un tableau de contingence avec les moyennes d'abondance
##  renvoie un tablmeau de contingence + un tableau résumant par espèce, le nombre de lacs où elle a été échantillonnée
fun_table_taxo <- function(df, seuil_prop = 5) {
df_descriptif <- df %>%
group_by(code_lac, nom_taxo) %>%
dplyr::summarise(p = 1) %>%
spread(code_lac, p, fill = 0) %>%
mutate(n = dplyr::select_if(., is.numeric) %>% rowSums,
prop = (n / (ncol(.) - 2)) * 100) %>%
dplyr::select(nom_taxo, n, prop) %>%
arrange(desc(prop)) %>%
dplyr::filter(prop > seuil_prop)
vec_taxon_filtre <- df_descriptif$nom_taxo
df_contingence <- df %>%
dplyr::filter(nom_taxo %in%vec_taxon_filtre) %>%
group_by(code_lac, nom_taxo) %>%
dplyr::summarise(moy = mean(abondance)) %>%
spread(nom_taxo, moy, fill = 0)
return(list(df_descriptif,df_contingence))
}
fun_codage_flou <- function(liste,nom_df,var,var_name = "AFF_"){
var_2 <- var
var <- rlang::syms(var)
df <- liste[[nom_df]] %>% dplyr::select(c(SBS_name,all_of(var_2))) %>% na.omit()
df_codage_flou <- df %>%
group_by(SBS_name,!!!var) %>%
dplyr::summarise(n=n()) %>%
spread(var_2,n,fill=0) %>%
ungroup() %>%
mutate(somme =  dplyr::select_if(., is.numeric) %>% rowSums) %>%
mutate_if(is.numeric,~./somme) %>%
dplyr::select(-somme) %>%
setnames(colnames(.),
c("nom_taxon",
paste0(
rep(var_name,ncol(.)-1),
str_replace_all(tolower(colnames(.)[-1])," ","_")
)
)
)
df_unique <- df %>%
group_by(SBS_name,!!!var) %>%
dplyr::summarise(n=n()) %>%
group_by(SBS_name) %>%
nest() %>%
mutate(a = map_chr(data,~ifelse(length(unique(.$n))> 1 & max(.$n) >1,
filter(.,n == max(n)) %>% pull(1),
sample_n(.,1) %>% pull(1)))) %>%
dplyr::select(SBS_name,a) %>%
setnames("a",var_2)
return(list(df_codage_flou,df_unique))
df_unique_combinaison <- df
}
######## fonction PCA ########
fun_pca <- function(acp,
axes=c(1,2),
biplot = TRUE,
ind = FALSE,
repel = FALSE,
tab = FALSE) {
if (tab == FALSE) {
if (biplot == TRUE) {
if (ind == TRUE) {
fviz_pca_biplot(acp,
axes=axes,
repel = repel,
col.var = "#2E9FDF",
# Variables color
col.ind = "#696969")  # Individuals color) %>% return()
} else{
fviz_pca_biplot(
acp,
axes=axes,
repel = repel,
col.var = "#2E9FDF",
geom.ind = "point",
# Variables color
col.ind = "#696969"
)  # Individuals color) %>% return()
}
} else{
a <- fviz_pca_ind(
acp,
axes=axes,
col.ind = "cos2",
repel = repel,
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
b <- fviz_pca_var(
acp,
axes=axes,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = repel
)
ggarrange(plotlist = list(a, b)) %>% return()
}
} else{
vec_inertie_var <-
inertia.dudi(acp, col.inertia = TRUE)[[1]]$inertia
inertie <-
round(vec_inertie_var / sum(vec_inertie_var) * 100, 2)
a <- inertia.dudi(acp, col.inertia = TRUE)[[3]] %>%
tibble::rownames_to_column(var = "variables") %>%
as_tibble() %>%
arrange(desc(Axis1)) %>%
mutate_if(is.numeric,  ~ round(., 2)) %>%
setnames(colnames(.)[-1], paste0("axe", 1:(ncol(.) - 1), " (", inertie[1:ncol(.) -
1], "%)")) %>% as.data.frame()
for (i in 2:ncol(a))a[, i] <- color_bar("lightblue")(a[, i])
a %>% formattable() %>% return()
cat(paste0(1:length(inertie), ":", cumsum(round(inertie)), "%"))
}
}
########## is.binaire ######### permet de tester si un vecteur ou une colonne est binaire
is.binaire <- function(df){
binaire <- c()
if(is.null(ncol(df))==FALSE){
for(i in 1:ncol(df)){
binaire[i] <- all(df[,i] %>% pull() %>% unique() %in%c(0,1),na.rm=TRUE)
}
}else{
binaire <- all(df %>% unique() %in%c(0,1),na.rm=TRUE)
}
return(binaire)
}
########### fonction pour filtrer les NA par ligne ou colonnes en applicant un seuil ##########
# le seuil correspond à une proportion de NA par ligne ou colonnes à partir du quelle on ne gardera pas les données
# seuil de données disponible (0.2 = on garde si il y a plus de 20% des données disponible)
fun_NA <- function(df, seuil = 0.2, bycol = TRUE) {
if (bycol == FALSE) {
tab <-
df[(!apply(df, MARGIN = 2, is.na)) %>% rowSums(.) / ncol(df)> seuil, ]
} else{
tab <-
df[, (!apply(df, MARGIN = 2, is.na)) %>% colSums(.) / nrow(df) > seuil]
}
return(tab)
}
fun_NA2 <- function(df,seuil_row=0.3,seuil_col=0.3,colfirst=TRUE){
if(colfirst==TRUE){
filtre_col <- fun_NA(df,seuil = seuil_col,bycol = TRUE)
fun_NA(filtre_col,seuil = seuil_row,bycol = FALSE) %>% return()
}else{
filtre_row <- fun_NA(df,seuil = seuil_row,bycol = FALSE)
fun_NA(filtre_row,seuil = seuil_col,bycol = FALSE) %>% return()
}
}
######################## fonction calcul de diversite
df_c <- df_poisson
fun_div <- function(df_c){
df_c <- ungroup(df_c)
esp_0 <- df_c %>% as.data.frame()%>% column_to_rownames() %>%dplyr::select_if( colSums(.)==0) %>% colnames()
df_com <- df_c%>% dplyr::select(-esp_0)
diversite_spe <- map_dfc(c("shannon","simpson"),
~df_com %>%
dplyr::select(-code_lac) %>%
diversity(index=.x)) %>% setnames(colnames(.),c("shannon","simpson")) %>%
mutate(code_lac = df_c$code_lac)
richesse <- df_com %>% dplyr::select(-code_lac) %>% mutate_all(~ifelse(.>0,1,0)) %>% rowSums()
diversite_spe <- diversite_spe %>%  mutate(richesse=richesse)  %>%
return()
}
##################### fonction PCA composantes
fun_comp <- function(df,site=table_physicochimie$code_lac,seuil=60,nom="PC_"){
acp <- df %>% dudi.pca(scannf = FALSE,nf=ncol(df))
vec_inertie_var <- inertia.dudi(acp, col.inertia = TRUE)[[1]]$inertia
inertie <- round(vec_inertie_var / sum(vec_inertie_var) * 100, 2) %>% cumsum()
nombre_axes <- which.max(inertie>seuil)+1
data <- cbind(code_lac=site,acp$l1) %>% dplyr::select(1:nombre_axes) %>%
setnames(colnames(.)[-1],paste0("comp_",nom,1:(nombre_axes-1)))
return(data)
}
################### Fonction lasso
fun_lasso <- function(data,y = "phy_FRic",p = 0.7){
formule <- as.formula(paste(y,"~."))
training.samples <- data %>% pull(y) %>%  createDataPartition(p = p, list=F)
train.data <- data[training.samples,]
test.data <- data[-training.samples,]
env <- model.matrix(formule, train.data )[,-1]
cv_lasso <- glmnet::cv.glmnet(x = env, y = train.data %>% pull(y), alpha = 1)
lambda <- cv_lasso$lambda.min
lasso <- glmnet::glmnet(x = env, y = train.data %>% pull(y), alpha = 1, lambda = lambda)
x.test <- model.matrix(formule, test.data)[,-1]
predictions <- lasso %>% predict(newx = x.test)
plot(predictions,test.data %>% pull(y))
return(list(R2=caret::R2(predictions,test.data %>% pull(y)),
coef(lasso)))
}
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rtools")
#################### Bayésien ######################
library("R2jags")
# data wrangling ####################
library("rlang")
library(dplyr)
install.packages("installr")
library(installr)
updateR()
#################### Bayésien ######################
library("R2jags")
# data wrangling ####################
library("rlang")
library(dplyr)
install.packages('rlang')
# data wrangling ####################
library("rlang")
library(dplyr)
library(plyr)
library(purrr)
library(tidyr)
install.packages('rlang')
install.packages("rlang")
# data wrangling ####################
library("rlang")
library(dplyr)
update.packages(ask=FALSE)
update.packages(ask=FALSE)
# data wrangling ####################
library("rlang")
library(dplyr)
x <- rnorm(100,10,2)
x2 <- x^2
y <- 6 + poly(x,degree = 2) + rnorm(100)
plot(x,y)
x <- rnorm(100,10,2)
y <- 6 + poly(x,degree = 2) + rnorm(100)
plot(x,y)
y
y <- 6 + 2x - x2 + rnorm(100)
plot(x,y)
x <- rnorm(100,10,2)
x2 <- x^2
y <- 6 + 2x - x2 + rnorm(100)
y <- 6 + 2*x - 4*x2 + rnorm(100)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,3,1)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,3,3)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,3,4)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,4,4)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,4,10)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,15,10)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,20,10)
plot(x,y)
y <- 6 + 5*x - 4*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 5*x - 10*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 5*x + 10*x2 + rnorm(100,20,20)
plot(x,y)
x <- rnorm(100,10,3)
x2 <- x^2
y <- 6 + 5*x + 10*x2 + rnorm(100,20,20)
plot(x,y)
x <- rnorm(100,10,1)
x2 <- x^2
y <- 6 + 5*x + 10*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 10*x + 10*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 10*x + 2*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 10*x + 3*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 1*x + 3*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 2*x + 3*x2 + rnorm(100,20,20)
plot(x,y)
y <- 6 + 2*x + 7*x2 + rnorm(100,20,20)
plot(x,y)
y <- 2 + 2*x + 7*x2 + rnorm(100,20,20)
plot(x,y)
y <- 2 + 2*x + 15*x2 + rnorm(100,20,20)
plot(x,y)
y <- 2 + 2*x + 15*x2
plot(x,y)
x <- rnorm(100)
x2 <- x^2
y <- 2 + 2*x + 15*x2 + rnorm(100,20,20)
plot(x,y)
y <- 2 + 2*x + 15*x2 + rnorm(100,10,10)
plot(x,y)
mod <- lm(y ~ x)
summary(lm)
mod <- lm(y ~ x)
summary(lm)
lm
summary(mod)
mod <- lm(y ~ x + x2)
summary(mod)
mod <- lm(y ~ poly(x,2,raw=TRUE))
summary(mod)
y <- 2 + 2*x - 15*x2 + rnorm(100,10,10)
plot(x,y)
mod <- lm(y ~ poly(x,2,raw=TRUE))
summary(mod)
x <- rnorm(1000)
x2 <- x^2
y <- 2 + 2*x - 15*x2 + rnorm(1000,10,10)
plot(x,y)
mod <- lm(y ~ poly(x,2,raw=TRUE))
summary(mod)
x <- rnorm(10000)
y <- 2 + 2*x - 15*x2 + rnorm(10000,10,10)
plot(x,y)
mod <- lm(y ~ poly(x,2,raw=TRUE))
summary(mod)
x <- rnorm(10000)
x2 <- x^2
y <- 2 + 2*x - 15*x2 + rnorm(10000,10,10)
plot(x,y)
mod <- lm(y ~ poly(x,2,raw=TRUE))
summary(mod)
qqplot(mod)
qqplot(mod$res)
qqplot(mod$residuals)
qqnorm(mod$residuals)
qqline(mod$residuals)
plot(mod)
15^2
4*14
225-56
14-sqrt(169)
15-sqrt(169)
2/28
15-sqrt(169)
15+sqrt(169)
28/2
0.01*0.97
0.01*0.97/(0.01*0.97+0.99*0.03)
chr <- c("En [25,-24], cliquez sur le caillou rond posé sur le gros caillou à droite.
En [25,-25], cliquez sur le petit caillou au pied du trio de tonneaux à droite.
En [25,-26], cliquez sur le petit caillou en haut à droite de la map.
En [24,-27], cliquez sur le petit caillou au pied du rocher en haut à droite.
En [26,-27], cliquez sur le petit caillou plat à gauche de la map.")
library(stringr)
str_extract_all(chr,"[:digit:]")
str_extract_all(chr,"[:digit:]{1,}")
chr
str_extract_all(chr,"\[[:digit:]{1,}")
str_extract_all(chr,"\\[[:digit:]{1,}")
str_extract_all(chr,"\\[[:digit:]{1,},[:digit:]\\]")
str_extract_all(chr,"\\[[:digit:]{1,},[:digit:]{1,n}\\]")
str_extract_all(chr,"\\[[:digit:]{1,[:punct:],[:digit:]{1,n}\\]")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:][:digit:]{1,n}\\]")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]-")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]-[:digit:]")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]-[:digit:]{1,}")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]-[:digit:]{1,}\\]")
str_extract_all(chr,"\\[[:digit:]{1,}[:punct:]-[:digit:]{1,}\\]",simplify = TRUE)
class(7)
class("7")
7<8
"7"<"8"
"8"<"7"
c("5","7","8")
v <- c(rnorm(10))
v
class(v)
typeof(v)
as.integer(v)
v <- 1:6
v
class(v)
v <- seq(-10,10,1)
v
class(v)
install.packages("R6")
?as.integer
v
as.integer(v)
a <- as.integer(v)
class(a)
a
as.integer(-10.6)
"10"
print("10")
as.character(a)
as.factor(a)
dir()
setwd("C:/Users/marec/OneDrive/Bureau/")
dir()
setwd("C:/Users/marec/OneDrive/Bureau/burea_these_theo_confi2")
setwd("C:/Users/marec/OneDrive/Bureau/bureau_these_theo_confi2")
dir()
setwd("C:/Users/marec/OneDrive/Bureau/bureau_these_theo_confi2/scriptR")
dir()
str_extract_all(dir(),".R")
library(readr)
library(stringr)
str_extract_all(dir(),".R")
str_extract_all(dir(),".(?=.R)")
str_extract_all(dir(),".(?=\\.R)")
str_extract_all(dir(),".(?<=\\.R)")
str_extract_all(dir(),".{1,}☺(?<=\\.R)")
str_extract_all(dir(),".{1,}(?<=\\.R)")
dir(pattern = ".R")
dir(pattern = "\\.R")
read_table(dir()[1])
a <- read_table(dir()[1])
a
dir(pattern = "\\.R")
script <- dir(pattern = "\\.R")
script
